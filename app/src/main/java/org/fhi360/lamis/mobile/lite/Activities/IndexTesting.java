package org.fhi360.lamis.mobile.lite.Activities;

import android.app.DatePickerDialog;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.os.Bundle;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.AppCompatSpinner;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.ScrollView;
import android.widget.Spinner;
import android.widget.TextView;

import com.library.NavigationBar;
import com.shashank.sony.fancytoastlib.FancyToast;

import org.fhi360.lamis.mobile.lite.DAO.HtsDAO;
import org.fhi360.lamis.mobile.lite.DAO.IndexContactDAO;
import org.fhi360.lamis.mobile.lite.Db.LAMISLiteDb;
import org.fhi360.lamis.mobile.lite.Model.Hts;
import org.fhi360.lamis.mobile.lite.Model.Hts2;
import org.fhi360.lamis.mobile.lite.Model.IndexContact;
import org.fhi360.lamis.mobile.lite.Model.IndexHelper;
import org.fhi360.lamis.mobile.lite.Model.Patient;
import org.fhi360.lamis.mobile.lite.R;
import org.fhi360.lamis.mobile.lite.Utils.PrefManager;
import org.fhi360.lamis.mobile.lite.Utils.SettingConfig;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Locale;

public class IndexTesting extends AppCompatActivity {
    private NavigationBar bar;
    private int position = 0;
    private String htsId;
    private String htsId1;
    private TextView header1;
    private EditText clientIndexCode, durationPartner, dateStarted, dateConfirmedHiv, serviceProvided, hospitalNum, numberOfPartners, surname, otherNames, age, address, phone, dateHivTest;
    private AppCompatSpinner index_type,
            notificationCounseling, agreeNotification, indexType, gender,
            hivStatus, linkCare, partnerNotification,
            gbv, phoneTracking, visitTracking, tracingOutcome,
            modeNotification, relation;
    private Button finishButton, finishButton2;
    private ScrollView activity_index1;
    private ScrollView activity_snt;
    private TextView sexualContact;
    private PrefManager session;
    private String names;
    private Calendar myCalendar = Calendar.getInstance();
    private String auoIncrementClientCode;
    private Integer autoGeneratedClientCode;
    private long deviceconfigId;
    private String clientcode;
    private long facilityId;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.index);
        getSupportActionBar().setBackgroundDrawable(new ColorDrawable(getResources()
                .getColor(R.color.colorPrimaryDark)));
        clientIndexCode = findViewById(R.id.clientIndexCode);
        dateStarted = findViewById(R.id.dateStarted);
        session = new PrefManager(getApplicationContext());
        surname = findViewById(R.id.surname);
        otherNames = findViewById(R.id.otherNames);
        age = findViewById(R.id.age);
        sexualContact = findViewById(R.id.sexualContact);
        indexType = findViewById(R.id.indexType);
        gender = findViewById(R.id.gender);
        address = findViewById(R.id.address);
        phone = findViewById(R.id.phone);
        dateHivTest = findViewById(R.id.dateHivTest);
        hivStatus = findViewById(R.id.hivStatus);
        header1 = findViewById(R.id.headerName);

        linkCare = findViewById(R.id.linkCare);
        partnerNotification = findViewById(R.id.partnerNotification);
        serviceProvided = findViewById(R.id.serviceProvided);
        relation = findViewById(R.id.relation);
        gbv = findViewById(R.id.gbv);
        phoneTracking = findViewById(R.id.phoneTracking);

        visitTracking = findViewById(R.id.visitTracking);
        tracingOutcome = findViewById(R.id.tracingOutcome);
        modeNotification = findViewById(R.id.modeNotification);
        durationPartner = findViewById(R.id.durationPartner);
        dateConfirmedHiv = findViewById(R.id.dateConfirmedHiv);
        hospitalNum = findViewById(R.id.hospitalNum);
        numberOfPartners = findViewById(R.id.numberOfPartners);
        index_type = findViewById(R.id.index_type);
        notificationCounseling = findViewById(R.id.notificationCounseling);
        agreeNotification = findViewById(R.id.agreeNotification);
        finishButton = findViewById(R.id.finishButton);
        activity_index1 = findViewById(R.id.activity_index1);
        activity_snt = findViewById(R.id.activity_snt);
        sexualContact = findViewById(R.id.sexualContact);
        finishButton2 = findViewById(R.id.finishButton2);
        Bundle bundle = getIntent().getExtras();

        HashMap<String, String> user1 = session.getProfileDetails();
        htsId = user1.get("htsId");
        SettingConfig settingConfig = new SettingConfig();
        final Hts hts = new HtsDAO(this).getData(Long.parseLong(htsId));
        if (hts != null) {
            dateConfirmedHiv.setText(hts.getDateVisit());
            names = hts.getSurname() + "   " + hts.getOtherNames();
            HashMap<String, String> code = session.getClientCode();
            auoIncrementClientCode = code.get("clientCode");
            deviceconfigId = hts.getDeviceconfigId();
            auoIncrementClientCode = hts.getLgaId() + "/" + hts.getFacilityId() + "/" + settingConfig.getTodaysyear() + "/" + settingConfig.getTodaysmonth() + "/" + autoGeneratedClientCode + "/" + hts.getDeviceconfigId();
            clientIndexCode.setText(auoIncrementClientCode);
            header1.setText(names);
            hospitalNum.setText(hts.getHospitalNum());
            clientcode = hts.getClientCode();
            facilityId = hts.getFacilityId();

        }

        final Patient patient = new HtsDAO(this).findPatientHtsId(Long.parseLong(htsId));
        if (patient != null) {
            dateStarted.setText(patient.getDateRegistration());
        }


        int countPages = new IndexContactDAO(this).countPages(Long.parseLong(htsId));
        if (countPages == 1) {
            activity_snt.setVisibility(View.INVISIBLE);
            header1.setText("Indexing  " + names + " (" + auoIncrementClientCode + ") with Sexual Contact (Second)");
            activity_index1.setVisibility(View.VISIBLE);
        } else if (countPages == 2) {
            activity_snt.setVisibility(View.INVISIBLE);
            header1.setText("Indexing  " + names + " (" + auoIncrementClientCode + ") with Sexual Contact (Third)");
            activity_index1.setVisibility(View.VISIBLE);
        } else if (countPages == 3) {
            activity_snt.setVisibility(View.INVISIBLE);
            header1.setText("Indexing  " + names + " (" + auoIncrementClientCode + ") with Sexual Contact (Fourth)");
            activity_index1.setVisibility(View.VISIBLE);
        } else if (countPages == 4) {
            activity_snt.setVisibility(View.INVISIBLE);
            header1.setText("Indexing  " + names + " (" + auoIncrementClientCode + ") with Sexual Contact (Fifth)");
            activity_index1.setVisibility(View.VISIBLE);
        } else if (countPages == 5) {
            activity_snt.setVisibility(View.INVISIBLE);
            activity_index1.setVisibility(View.VISIBLE);
            header1.setText("Indexing  " + names + " (" + auoIncrementClientCode + ") with  Sexual Contact (Sixth)");
        } else if (countPages == 6) {
            activity_snt.setVisibility(View.INVISIBLE);
            header1.setText("Indexing  " + names + " (" + auoIncrementClientCode + ") with  Sexual Contact (Seventh)");
            activity_index1.setVisibility(View.VISIBLE);
        } else if (countPages == 7) {
            activity_snt.setVisibility(View.INVISIBLE);
            activity_index1.setVisibility(View.VISIBLE);
            header1.setText("Indexing  " + names + " (" + auoIncrementClientCode + ") with Sexual Contact (Eigth)");
        } else if (countPages == 8) {
            activity_snt.setVisibility(View.INVISIBLE);
            header1.setText("Indexing  " + names + " (" + auoIncrementClientCode + ") with  Sexual Contact (Nine)");
        } else if (countPages == 9) {
            activity_snt.setVisibility(View.INVISIBLE);
            header1.setText("Indexing  " + names + " (" + auoIncrementClientCode + ") with  Sexual Contact (Ten)");
            activity_index1.setVisibility(View.VISIBLE);
        } else if (countPages == 10) {
            activity_snt.setVisibility(View.INVISIBLE);
            header1.setText("Indexing  " + names + " (" + auoIncrementClientCode + ") with Sexual Contact (Eleventh)");
            activity_index1.setVisibility(View.VISIBLE);
        } else if (countPages == 11) {
            activity_snt.setVisibility(View.INVISIBLE);
            header1.setText("Indexing  " + names + " (" + auoIncrementClientCode + ") with  Sexual Contact (Twelveth)");
            activity_index1.setVisibility(View.VISIBLE);
        } else if (countPages == 12) {
            activity_snt.setVisibility(View.INVISIBLE);
            header1.setText("Indexing  " + names + " (" + auoIncrementClientCode + ") with Sexual Contact (Thirteenth)");
            activity_index1.setVisibility(View.VISIBLE);
        } else if (countPages == 13) {
            activity_snt.setVisibility(View.INVISIBLE);
            header1.setText("Indexing  " + names + " (" + auoIncrementClientCode + ") with  Sexual Contact (Fourteenth)");
            activity_index1.setVisibility(View.VISIBLE);
        } else if (countPages == 14) {
            activity_snt.setVisibility(View.INVISIBLE);
            header1.setText("Indexing  " + names + " (" + auoIncrementClientCode + ") with  Sexual Contact (Fifteenth)");
            activity_index1.setVisibility(View.VISIBLE);
        } else if (countPages == 15) {
            activity_snt.setVisibility(View.INVISIBLE);
            header1.setText("Indexing  " + names + " (" + auoIncrementClientCode + ") with  Sexual Contact (Sixteenth)");
            activity_index1.setVisibility(View.VISIBLE);
        } else if (countPages == 16) {
            activity_snt.setVisibility(View.INVISIBLE);
            header1.setText("Indexing  " + names + " (" + auoIncrementClientCode + ") with  Sexual Contact (Seventeenth)");
            activity_index1.setVisibility(View.VISIBLE);
        } else if (countPages == 17) {
            activity_snt.setVisibility(View.INVISIBLE);
            header1.setText("Indexing  " + names + " (" + auoIncrementClientCode + ") with Sexual Contact (Eighteenth)");
            activity_index1.setVisibility(View.VISIBLE);
        }


        finishButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (index_type.getSelectedItem().toString().equals("")) {
                    FancyToast.makeText(getApplicationContext(), "Select Index type", FancyToast.LENGTH_LONG, FancyToast.ERROR, false).show();
                } else if (validateInput1(dateConfirmedHiv.getText().toString(), dateStarted.getText().toString(), hospitalNum.getText().toString(), numberOfPartners.getText().toString()))
                    if (notificationCounseling.getSelectedItem().toString().equals("")) {
                        FancyToast.makeText(getApplicationContext(), "Enter Notification counseling", FancyToast.LENGTH_LONG, FancyToast.ERROR, false).show();
                    } else if (numberOfPartners.getText().toString().equals("")) {
                        FancyToast.makeText(getApplicationContext(), "Enter number of Partners", FancyToast.LENGTH_LONG, FancyToast.ERROR, false).show();
                    } else {
                        IndexHelper indexHelper = new IndexHelper();
                        indexHelper.setAgreeNotifications(agreeNotification.getSelectedItem().toString());
                        indexHelper.setClientIndexCode(clientIndexCode.getText().toString());
                        indexHelper.setDateConfirmHivStatus(dateConfirmedHiv.getText().toString());
                        indexHelper.setDateEnrolledHivCase(dateStarted.getText().toString());
                        indexHelper.setHtsId(Long.parseLong(htsId));
                        indexHelper.setHuspitalNum(hospitalNum.getText().toString());
                        indexHelper.setIndexType(index_type.getSelectedItem().toString());
                        indexHelper.setDeviceconfigId(deviceconfigId);
                        indexHelper.setNotificationCounseling(notificationCounseling.getSelectedItem().toString());
                        indexHelper.setNumberPartner(numberOfPartners.getText().toString());
                        if (new HtsDAO(getApplicationContext()).updateContact(indexHelper)) {
                            showAlert();
                            FancyToast.makeText(getApplicationContext(), "Record Save Successfully", FancyToast.LENGTH_LONG, FancyToast.SUCCESS, false).show();
                        } else {
                            FancyToast.makeText(getApplicationContext(), "Records not Found on hts", FancyToast.LENGTH_LONG, FancyToast.ERROR, false).show();
                        }

                    }
            }

        });

        final DatePickerDialog.OnDateSetListener date3 = new DatePickerDialog.OnDateSetListener() {

            @Override
            public void onDateSet(DatePicker view, int year, int monthOfYear,
                                  int dayOfMonth) {
                // TODO Auto-generated method stub
                myCalendar.set(Calendar.YEAR, year);
                myCalendar.set(Calendar.MONTH, monthOfYear);
                myCalendar.set(Calendar.DAY_OF_MONTH, dayOfMonth);
                updateLabel1();
            }

        };


        dateHivTest.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // TODO Auto-generated method stub
                final DatePickerDialog mDatePicker = new DatePickerDialog(IndexTesting.this, date3, myCalendar
                        .get(Calendar.YEAR), myCalendar.get(Calendar.MONTH),
                        myCalendar.get(Calendar.DAY_OF_MONTH));
                mDatePicker.getDatePicker().setMaxDate(System.currentTimeMillis());
                mDatePicker.show();


            }
        });
//
        final DatePickerDialog.OnDateSetListener date2 = new DatePickerDialog.OnDateSetListener() {

            @Override
            public void onDateSet(DatePicker view, int year, int monthOfYear,
                                  int dayOfMonth) {
                // TODO Auto-generated method stub
                myCalendar.set(Calendar.YEAR, year);
                myCalendar.set(Calendar.MONTH, monthOfYear);
                myCalendar.set(Calendar.DAY_OF_MONTH, dayOfMonth);
                updateLabel();
            }

        };


        dateStarted.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // TODO Auto-generated method stub
                final DatePickerDialog mDatePicker = new DatePickerDialog(IndexTesting.this, date2, myCalendar
                        .get(Calendar.YEAR), myCalendar.get(Calendar.MONTH),
                        myCalendar.get(Calendar.DAY_OF_MONTH));
                // mDatePicker.getDatePicker().setMaxDate(System.currentTimeMillis());
                mDatePicker.show();


            }
        });

        final DatePickerDialog.OnDateSetListener date = new DatePickerDialog.OnDateSetListener() {

            @Override
            public void onDateSet(DatePicker view, int year, int monthOfYear,
                                  int dayOfMonth) {
                // TODO Auto-generated method stub
                myCalendar.set(Calendar.YEAR, year);
                myCalendar.set(Calendar.MONTH, monthOfYear);
                myCalendar.set(Calendar.DAY_OF_MONTH, dayOfMonth);
                updateLabel2();
            }

        };


        dateConfirmedHiv.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // TODO Auto-generated method stub
                final DatePickerDialog mDatePicker = new DatePickerDialog(IndexTesting.this, date, myCalendar
                        .get(Calendar.YEAR), myCalendar.get(Calendar.MONTH),
                        myCalendar.get(Calendar.DAY_OF_MONTH));
                // mDatePicker.getDatePicker().setMaxDate(System.currentTimeMillis());
                mDatePicker.show();


            }
        });

        finishButton2.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (indexType.getSelectedItem().toString().equals("")) {
                    FancyToast.makeText(getApplicationContext(), "Select contact type", FancyToast.LENGTH_LONG, FancyToast.ERROR, false).show();
                } else if (surname.getText().toString().equals("")) {
                    FancyToast.makeText(getApplicationContext(), "Enter surname", FancyToast.LENGTH_LONG, FancyToast.ERROR, false).show();
                } else if (otherNames.getText().toString().equals("")) {
                    FancyToast.makeText(getApplicationContext(), "Enter other name", FancyToast.LENGTH_LONG, FancyToast.ERROR, false).show();
                } else if (age.getText().toString().equals("")) {
                    FancyToast.makeText(getApplicationContext(), "Enter  age", FancyToast.LENGTH_LONG, FancyToast.ERROR, false).show();
                } else if (gender.getSelectedItem().toString().equals("")) {
                    FancyToast.makeText(getApplicationContext(), "Select gender", FancyToast.LENGTH_LONG, FancyToast.ERROR, false).show();
                } else {
                    IndexContact indexContact = new IndexContact();
                    Hts2 hts2 = new Hts2();
                    hts2.setHtsId(Long.parseLong(htsId));
                    indexContact.setHts(hts2);
                    indexContact.setFacilityId(facilityId);
                    indexContact.setContactType(indexType.getSelectedItem().toString());
                    indexContact.setSurname(surname.getText().toString());
                    indexContact.setOtherNames(otherNames.getText().toString());
                    indexContact.setAge(Integer.parseInt(age.getText().toString()));
                    indexContact.setGender(gender.getSelectedItem().toString());
                    indexContact.setAddress(address.getText().toString());
                    indexContact.setPhone(phone.getText().toString());
                    indexContact.setDeviceconfigId(deviceconfigId);
                    indexContact.setRelationship(relation.getSelectedItem().toString());
                    indexContact.setGbv(gbv.getSelectedItem().toString());
                    if (durationPartner.getText().toString().equals("")) {
                        indexContact.setDurationPartner(0);
                    } else {
                        indexContact.setDurationPartner(Integer.parseInt(durationPartner.getText().toString()));
                    }
                    indexContact.setClientCode(clientcode);
                    indexContact.setPhoneTracking(phoneTracking.getSelectedItem().toString());
                    indexContact.setHomeTracking(visitTracking.getSelectedItem().toString());
                    indexContact.setIndexContactCode(auoIncrementClientCode);
                    indexContact.setOutcome(tracingOutcome.getSelectedItem().toString());
                    indexContact.setDateHivTest(dateHivTest.getText().toString());
                    indexContact.setHivStatus(hivStatus.getSelectedItem().toString());
                    indexContact.setLinkCare(linkCare.getSelectedItem().toString());
                    indexContact.setPartnerNotification(partnerNotification.getSelectedItem().toString());
                    indexContact.setModeNotification(modeNotification.getSelectedItem().toString());
                    indexContact.setServiceProvided(serviceProvided.getText().toString());
                    new IndexContactDAO(getApplicationContext()).insertIndexContact(indexContact);
                    FancyToast.makeText(getApplicationContext(), "Record Saved Successfully", FancyToast.LENGTH_LONG, FancyToast.SUCCESS, false).show();
                    SettingConfig settingConfig = new SettingConfig();
                    settingConfig.setSpinText(indexType, "");
                    surname.setText("");
                    otherNames.setText("");
                    age.setText("");
                    settingConfig.setSpinText(gender, "");
                    address.setText("");
                    phone.setText("");
                    settingConfig.setSpinText(relation, "");
                    settingConfig.setSpinText(gbv, "");
                    durationPartner.setText("");
                    settingConfig.setSpinText(phoneTracking, "");
                    settingConfig.setSpinText(visitTracking, "");
                    settingConfig.setSpinText(tracingOutcome, "");
                    dateHivTest.setText("");
                    settingConfig.setSpinText(hivStatus, "");
                    settingConfig.setSpinText(linkCare, "");
                    settingConfig.setSpinText(partnerNotification, "");
                    settingConfig.setSpinText(modeNotification, "");
                    serviceProvided.setText("");
                    int countPages = new IndexContactDAO(getApplicationContext()).countPages(Long.parseLong(htsId));
                    if (countPages == 1) {
                        activity_snt.setVisibility(View.INVISIBLE);
                        header1.setText("Indexing  " + names + " (" + auoIncrementClientCode + ") with  Sexual Contact (Second)");

                    } else if (countPages == 2) {
                        activity_snt.setVisibility(View.INVISIBLE);
                        header1.setText("Indexing  " + names + " (" + auoIncrementClientCode + ") with  Sexual Contact (Third)");
                    } else if (countPages == 3) {
                        activity_snt.setVisibility(View.INVISIBLE);
                        header1.setText("Indexing  " + names + " (" + auoIncrementClientCode + ") with  Sexual Contact (Fourth)");
                    } else if (countPages == 4) {
                        activity_snt.setVisibility(View.INVISIBLE);
                        header1.setText("Indexing  " + names + " (" + auoIncrementClientCode + ") with  Sexual Contact (Fifth)");
                    } else if (countPages == 5) {
                        activity_snt.setVisibility(View.INVISIBLE);
                        header1.setText("Indexing  " + names + " (" + auoIncrementClientCode + ") with  Sexual Contact (Sixth)");
                    } else if (countPages == 6) {
                        activity_snt.setVisibility(View.INVISIBLE);
                        header1.setText("Indexing  " + names + " (" + auoIncrementClientCode + ") with  Sexual Contact (Seventh)");
                    } else if (countPages == 7) {
                        activity_snt.setVisibility(View.INVISIBLE);

                        header1.setText("Indexing  " + names + " (" + auoIncrementClientCode + ") with  Sexual Contact (Eigth)");
                    } else if (countPages == 8) {
                        activity_snt.setVisibility(View.INVISIBLE);
                        header1.setText("Indexing  " + names + " (" + auoIncrementClientCode + ") with Sexual Contact (Nine)");
                    } else if (countPages == 9) {
                        activity_snt.setVisibility(View.INVISIBLE);
                        header1.setText("Indexing  " + names + " (" + auoIncrementClientCode + ") with  Sexual Contact (Ten)");
                    } else if (countPages == 10) {
                        activity_snt.setVisibility(View.INVISIBLE);
                        header1.setText("Indexing  " + names + " (" + auoIncrementClientCode + ") with  Sexual Contact (Eleventh)");
                    } else if (countPages == 11) {
                        activity_snt.setVisibility(View.INVISIBLE);
                        header1.setText("Indexing  " + names + " (" + auoIncrementClientCode + ") with  Sexual Contact (Twelveth)");
                    } else if (countPages == 12) {
                        activity_snt.setVisibility(View.INVISIBLE);
                        header1.setText("Indexing  " + names + " (" + auoIncrementClientCode + ") with Sexual Contact (Thirteenth)");
                    } else if (countPages == 13) {
                        activity_snt.setVisibility(View.INVISIBLE);
                        header1.setText("Indexing  " + names + " (" + auoIncrementClientCode + ") with Sexual Contact (Fourteenth)");
                    } else if (countPages == 14) {
                        activity_snt.setVisibility(View.INVISIBLE);
                        header1.setText("Indexing  " + names + " (" + auoIncrementClientCode + ") with Sexual Contact (Fifteenth)");
                    } else if (countPages == 15) {
                        activity_snt.setVisibility(View.INVISIBLE);
                        header1.setText("Indexing  " + names + " (" + auoIncrementClientCode + ") with  Sexual Contact (Sixteenth)");
                    } else if (countPages == 16) {
                        activity_snt.setVisibility(View.INVISIBLE);
                        header1.setText("Indexing  " + names + " (" + auoIncrementClientCode + ") with Sexual Contact (Seventeenth)");
                    } else if (countPages == 17) {
                        activity_snt.setVisibility(View.INVISIBLE);
                        header1.setText("Indexing  " + names + " (" + auoIncrementClientCode + ") with  Sexual Contact (Eighteenth)");
                    }


                }

            }
        });

    }

    private void showAlert() {
        LayoutInflater li = LayoutInflater.from(getApplicationContext());
        View promptsView = li.inflate(R.layout.pop_up2, null);
        final AlertDialog dialog = new AlertDialog.Builder(this).create();
        dialog.setView(promptsView);
        final TextView notitopOk, notitopNotnow;
        notitopOk = promptsView.findViewById(R.id.notitopOk);
        notitopNotnow = promptsView.findViewById(R.id.notitopNotnow);
        notitopNotnow.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                dialog.dismiss();
            }
        });
        notitopOk.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                activity_index1.setVisibility(View.VISIBLE);
                header1.setText("Indexing  " + names + " (" + auoIncrementClientCode + ") with Sexual Contact (First)");
                activity_snt.setVisibility(View.INVISIBLE);
                dialog.dismiss();
            }
        });

        dialog.setCancelable(false);
        dialog.show();
    }

    //
    private void updateLabel1() {
        String myFormat = "yyyy-MM-dd";
        SimpleDateFormat sdf = new SimpleDateFormat(myFormat, Locale.US);
        dateHivTest.setText(sdf.format(myCalendar.getTime()));

    }

    private void updateLabel2() {
        String myFormat = "yyyy-MM-dd";
        SimpleDateFormat sdf = new SimpleDateFormat(myFormat, Locale.US);
        dateConfirmedHiv.setText(sdf.format(myCalendar.getTime()));

    }

    private void updateLabel() {
        String myFormat = "yyyy-MM-dd";
        SimpleDateFormat sdf = new SimpleDateFormat(myFormat, Locale.US);
        dateStarted.setText(sdf.format(myCalendar.getTime()));

    }

    private boolean validateInput1(String surname1, String otherName1, String age1) {
        if (surname1.isEmpty()) {
            surname.setError("Enter surname");
            //surname.setText(surname.getText().toString());
            FancyToast.makeText(getApplicationContext(), "Enter surname", FancyToast.LENGTH_LONG, FancyToast.ERROR, false).show();
            return false;

        } else if (otherName1.isEmpty()) {
            otherNames.setError("Enter othername");
            // hospitalNum.setText(hospitalNum.getText().toString());
            FancyToast.makeText(getApplicationContext(), "Enter other name", FancyToast.LENGTH_LONG, FancyToast.ERROR, false).show();
            return false;

        }
        if (age1.isEmpty()) {
            age.setError("Enter age");
            //hospitalNum.setText(hospitalNum.getText().toString());
            FancyToast.makeText(getApplicationContext(), "Enter age", FancyToast.LENGTH_LONG, FancyToast.ERROR, false).show();
            return false;

        }
        return true;


    }


    private boolean validateInput1(String dateConfirmedHiv1, String dateStarted1, String hospitalNum1, String numberOfPartners1) {
        if (dateConfirmedHiv1.isEmpty()) {
            dateConfirmedHiv.setError("Enter date confirmed HIV status");
            FancyToast.makeText(getApplicationContext(), "Enter date confirmed HIV status", FancyToast.LENGTH_LONG, FancyToast.ERROR, false).show();
            return false;
        }
        if (dateStarted1.isEmpty()) {
            dateStarted.setError("Enter date Enrolled into HIV status");
            FancyToast.makeText(getApplicationContext(), "Enter date Enrolled into HIV status", FancyToast.LENGTH_LONG, FancyToast.ERROR, false).show();
            return false;
        }
        if (hospitalNum1.isEmpty()) {
            hospitalNum.setError("Enter Hospital number");
            FancyToast.makeText(getApplicationContext(), "Enter Hospital number", FancyToast.LENGTH_LONG, FancyToast.ERROR, false).show();
            return false;
        }

        if (numberOfPartners1.isEmpty()) {
            numberOfPartners.setError("Enter number of Partners");
            FancyToast.makeText(getApplicationContext(), "Enter number of Partners", FancyToast.LENGTH_LONG, FancyToast.ERROR, false).show();
            return false;
        }
        return true;


    }

    private boolean settingsSpinnerError1(Spinner spinner) {
        View selectedView = spinner.getSelectedView();
        if (selectedView != null && selectedView instanceof TextView) {
            spinner.requestFocus();
            TextView selectedTextView = (TextView) selectedView;
            selectedTextView.setError("error");
            selectedTextView.setTextColor(Color.RED); //text color in which you want your error message to be displayed
            selectedTextView.setText("Select Index type"); // actual error message
            spinner.performClick(); // to open the spinner list if error is found.
            FancyToast.makeText(getApplicationContext(), "Index type can not be empty", FancyToast.LENGTH_LONG, FancyToast.ERROR, false).show();
            return false;
        }
        return true;
    }

}

